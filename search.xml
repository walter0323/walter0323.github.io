<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>链式编程</title>
      <link href="/posts/7c194a5.html"/>
      <url>/posts/7c194a5.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是链式编程"><a href="#什么是链式编程" class="headerlink" title="什么是链式编程"></a>什么是链式编程</h2><p>链式编程实际上就是返回this对象，从而达到链式的效果。</p><p>doFunc(x).andThen().andThen().andThen();</p><h2 id="我们用过链式编程吗？"><a href="#我们用过链式编程吗？" class="headerlink" title="我们用过链式编程吗？"></a>我们用过链式编程吗？</h2><p>其实链式编程非常常见，如我们经常使用的StringBuilder和StringBuffer的append()方法就是最好的例子。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">buffer.append(<span class="string">&quot;链式&quot;</span>).append(<span class="string">&quot;编程&quot;</span>).append(<span class="string">&quot;!&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="append-源码"><a href="#append-源码" class="headerlink" title="append()源码"></a>append()源码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> StringBuilder <span class="title function_">append</span><span class="params">(String str)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.append(str);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链式编程示例"><a href="#链式编程示例" class="headerlink" title="链式编程示例"></a>链式编程示例</h2><p>这是一个Person类，区别于常规的Bean就是让set方法返回了this对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Person <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Person <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="keyword">return</span>  <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAddress</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Person <span class="title function_">setAddress</span><span class="params">(String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们就可以达到链式编程的效果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        person.setName(<span class="string">&quot;大头儿子&quot;</span>)</span><br><span class="line">                .setAge(<span class="number">5</span>)</span><br><span class="line">                .setAddress(<span class="string">&quot;幸福小区&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这样的代码是不是看起来就更简洁明了，也省去了很多重复的不必要的代码。</p><h2 id="Lombok简化开发"><a href="#Lombok简化开发" class="headerlink" title="Lombok简化开发"></a>Lombok简化开发</h2><p>lombok中提供了开启链式编程的注解，我们只需要设置@Accessors(chain &#x3D; true)即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis的持久化 (为什么没有设置持久化也自动的进行了持久化操作)</title>
      <link href="/posts/28bc9aad.html"/>
      <url>/posts/28bc9aad.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>在说持久化前我们应该先了解为什么要持久化？</p><p>这是因为 Redis 是<strong>基于内存</strong>的数据库，宕机后我们保存在内存中的数据会消失，如果想要恢复这些数据，就需要持久化操作。</p><h2 id="Redis有哪几种持久化方式"><a href="#Redis有哪几种持久化方式" class="headerlink" title="Redis有哪几种持久化方式"></a>Redis有哪几种持久化方式</h2><p>Redis的持久化分为 RDB 和 AOF 两种模式。</p><p>RDB：默认的持久化方式，以指定的时间间隔执行数据集的时间点快照，也就是说 RDB 是以快照方式将某一时刻的数据保存到磁盘上，生成一个 dump.rdb 文件，每当 redis 重启后会优先读取 dump.rdb 文件，将数据写入内存中。</p><p>AOF：默认情况下是关闭的，采用日志的形式记录每个写操作，追加在 AOF 文件末尾。启用后生成的持久化文件为 appendonly.aof。</p><p>当然你也可以选择不采用持久化操作或使用 RDB + AOF 的混合持久化操作。</p><h2 id="RDB-Redis-DataBase"><a href="#RDB-Redis-DataBase" class="headerlink" title="RDB (Redis DataBase)"></a>RDB (Redis DataBase)</h2><h4 id="RDB的配置"><a href="#RDB的配置" class="headerlink" title="RDB的配置"></a>RDB的配置</h4><p>打开 Redis 的配置文件 redis.conf，save 可以设置在指定时间内更新操作达到指定次数就进行快照，可以多条save 同时使用。</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">save 900 1  <span class="params">#</span> 表示900秒内至少1个键被更改则进行快照</span><br><span class="line">save 300 10  <span class="params">#</span> 表示300秒内至少10个键被更改则进行快照</span><br><span class="line">save 60 10000  <span class="params">#</span> 表示60秒内至少10000个键被更改则进行快照</span><br></pre></td></tr></table></figure><p>还可以通过 <strong>dbfilename</strong> 设置快照文件名，默认为 dump.rdb；通过 <strong>dir</strong> 设置保存路径。</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ol><li>RDB是二进制压缩文件，占用空间小，便于传输(主从复制)。</li><li>适合大规模的数据恢复。</li><li>对数据完整性和一致性要求不高。</li><li>在内存中加载速度快。</li><li>主进程fork子进程，最大化Redis性能。</li></ol><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ol><li>数据完整性得不到保障，如果在定时持久化前宕机，会丢失最后一次持久化后的所有数据。</li><li>依赖于主进程的fork，在大数据集中，会阻塞。</li></ol><h2 id="AOF-Append-Only-File"><a href="#AOF-Append-Only-File" class="headerlink" title="AOF (Append Only File)"></a>AOF (Append Only File)</h2><h4 id="AOF的三种写回策略"><a href="#AOF的三种写回策略" class="headerlink" title="AOF的三种写回策略"></a>AOF的三种写回策略</h4><ol><li>always：同步写回，每个写命令执行完立刻同步地将日志写回磁盘。</li><li>everysec (默认)：每秒写回，每个写命令执行后会先把日志写到 AOF 文件内存缓冲区，每隔一秒将缓存区内容写到磁盘上。</li><li>no：写命令执行完后把日志写到 AOF 文件内存缓冲区，由操作系统决定何时将缓冲区内容写入磁盘。</li></ol><h4 id="AOF的配置"><a href="#AOF的配置" class="headerlink" title="AOF的配置"></a>AOF的配置</h4><p>打开 Redis 的配置文件 redis.conf ，将 appendonly 改为 yes</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">appendonly yes</span><br><span class="line"></span><br><span class="line"><span class="params">#</span> 三种写回策略</span><br><span class="line"><span class="params">#</span> appendfsync always</span><br><span class="line">appendfsync everysec  <span class="params">#</span> 默认</span><br><span class="line"><span class="params">#</span> appendfsync no</span><br></pre></td></tr></table></figure><p>同样可以使用 <strong>dir</strong> 设置保存路径，设置 AOF 文件名需要更改 <strong>appendfilename</strong></p><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><ol><li>更好的保护数据完整性。</li></ol><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><ol><li>对于相同数据集而言，AOF文件会比 RDB文件更大，恢复速度也慢于 RDB。</li></ol><h4 id="AOF的重写机制"><a href="#AOF的重写机制" class="headerlink" title="AOF的重写机制"></a>AOF的重写机制</h4><p>当 AOF 文件大小超过所设定的峰值时，Redis 就会自动启动 AOF 文件的内容压缩，只保留可以恢复数据的最小指令集。</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">#</span> 当前aof文件大小超过上一次aof文件大小的百分之多少进行重写</span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line"></span><br><span class="line"><span class="params">#</span> 当文件大小大于64mb时进行重写</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br></pre></td></tr></table></figure><p>两条配置要<strong>同时满足</strong>才会触发重写。</p><p><strong>手动重写</strong>：执行 bgrewriteaof 命令</p><h2 id="混合持久化"><a href="#混合持久化" class="headerlink" title="混合持久化"></a>混合持久化</h2><p>同时开启 RDB 和 AOF，启用混合持久化后重启时只会加载 AOF 文件，不会加载 RDB 文件，如果没有 AOF 文件再去加载 RDB 文件。</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">#</span> 开启混合持久化</span><br><span class="line">aof-use-rdb-preamble yes</span><br></pre></td></tr></table></figure><p>这种持久化方式会先进行快照存储，然后使用 AOF 持久化记录所有写操作，当触发重写后，将最新的数据存储为RDB 记录，重启服务时就会从 RDB 和 AOF 两部分恢复数据，即保证数据完整性又提高恢复数据的性能。这种持久化方式生成的文件一部分为 RDB，一部分为 AOF。</p><h2 id="为什么两个持久化都没有开启却进行了持久化操作"><a href="#为什么两个持久化都没有开启却进行了持久化操作" class="headerlink" title="为什么两个持久化都没有开启却进行了持久化操作"></a>为什么两个持久化都没有开启却进行了持久化操作</h2><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">#</span> save 900 1</span><br><span class="line"><span class="params">#</span> save 300 10</span><br><span class="line"><span class="params">#</span> save 60 10000</span><br><span class="line"></span><br><span class="line">appendonly no</span><br></pre></td></tr></table></figure><h4 id="触发快照的条件"><a href="#触发快照的条件" class="headerlink" title="触发快照的条件"></a>触发快照的条件</h4><ol><li>满足配置文件中设置的 save。</li><li>手动执行 sava &#x2F; bgsave 命令。</li><li>执行 flushall &#x2F; flushdb 命令，但产生的是空 dump.rdb 文件。</li><li>执行shutdown且没有开启 AOF 持久化。</li><li>主从复制。</li></ol><p>如果想彻底<strong>禁用</strong> RDB，可以将save置空</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">save &quot;&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
