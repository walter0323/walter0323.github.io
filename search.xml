<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>什么是分布式事务</title>
      <link href="/posts/444770d.html"/>
      <url>/posts/444770d.html</url>
      
        <content type="html"><![CDATA[<h2 id="本地事务"><a href="#本地事务" class="headerlink" title="本地事务"></a>本地事务</h2><p>在计算机系统中，更多的是通过关系型数据库来控制事务，这是利用数据库本身的事务特性来实现的，因此叫数据库事务，由于应用主要靠关系数据库来控制事务，而数据库通常和应用在同一个服务器，所以基于关系型数据库的事务又被称为本地事务。</p><p>数据库事务的四大特性：ACID</p><p><strong>A（Atomic）</strong>：原子性，构成事务的所有操作，要么都执行完成，要么全部不执行，不可能出现部分成功部分失败的情况。</p><p><strong>C（Consistency）</strong>：一致性，在事务执行前后，数据库的一致性约束没有被破坏。比如：张三向李四转 100 元，转账前和转账后的数据是正确状态这叫一致性，如果出现张三转出 100 元，李四账户没有增加 100 元这就出现了数 据错误，就没有达到一致性。</p><p><strong>I（Isolation）</strong>：隔离性，数据库中的事务一般都是并发的，隔离性是指并发的两个事务的执行互不干扰，一个事务不能看到其他事务的运行过程的中间状态。通过配置事务隔离级别可以比避免脏读、重复读问题。</p><p><strong>D（Durability）</strong>：持久性，事务完成之后，该事务对数据的更改会持久到数据库，且不会被回滚。</p><p>数据库事务在实现时会将一次事务的所有操作全部纳入到一个不可分割的执行单元，该执行单元的所有操作要么都成功，要么都失败，只要其中任一操作执行失败，都将导致整个事务的回滚。</p><h2 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h2><p>分布式系统会把一个应用系统拆分为可独立部署的多个服务，因此需要服务与服务之间远程协作才能完成事务操作，这种分布式系统环境下由不同的服务之间通过网络远程协作完成事务称之为<strong>分布式事务</strong>，例如用户注册送积分事务、创建订单减库存事务，银行转账事务等都是分布式事务。</p><p>本地事务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">begin transaction；</span><br><span class="line">    //1.本地数据库操作：张三减少金额</span><br><span class="line">    //2.本地数据库操作：李四增加金额</span><br><span class="line">commit transation;</span><br></pre></td></tr></table></figure><p>分布式事务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">begin transaction；</span><br><span class="line">    //1.本地数据库操作：张三减少金额</span><br><span class="line">    //2.远程调用：让李四增加金额</span><br><span class="line">commit transation;</span><br></pre></td></tr></table></figure><p>如果当远程调用让李四增加金额成功了，由于网络问题远程调用并没有返回，此时本地事务提交失败就回滚了张三减少金额的操作，此时张三和李四的数据就不一致了。</p><p> 因此在分布式架构的基础上，传统数据库事务就无法使用了，张三和李四的账户不在一个数据库中甚至不在一个应用系统里，实现转账事务需要通过远程调用，由于网络问题就会导致分布式事务问题。</p><h2 id="分布式事务产生的情景"><a href="#分布式事务产生的情景" class="headerlink" title="分布式事务产生的情景"></a>分布式事务产生的情景</h2><h4 id="1-跨JVM进程产生分布式事务"><a href="#1-跨JVM进程产生分布式事务" class="headerlink" title="1. 跨JVM进程产生分布式事务"></a>1. 跨JVM进程产生分布式事务</h4><p>典型的场景就是微服务架构：微服务之间通过远程调用完成事务操作。比如：订单微服务和库存微服务，下单的同时订单微服务请求库存微服务减少库存。</p><h4 id="2-跨数据库实例产生分布式事务"><a href="#2-跨数据库实例产生分布式事务" class="headerlink" title="2.跨数据库实例产生分布式事务"></a>2.跨数据库实例产生分布式事务</h4><p>单体系统访问多个数据库实例当单体系统需要访问多个数据库（实例）时就会产生分布式事务。比如：用户信息和订单信息分别在两个MySQL实例存储，用户管理系统删除用户信息，需要分别删除用户信息及用户的订单信息，由于数据分布在不同的数据实例，需要通过不同的数据库链接去操作数据，此时产生分布式事务。</p><h4 id="3-多服务访问同一个数据库实例"><a href="#3-多服务访问同一个数据库实例" class="headerlink" title="3.多服务访问同一个数据库实例"></a>3.多服务访问同一个数据库实例</h4><p>订单微服务和库存微服务即使访问同一个数据库也会产生分布式事务，原因就是跨JVM进程，两个微服务持有了不同的数据库链接进行数据库操作，此时产生分布式事务。</p><h2 id="分布式事务基础理论"><a href="#分布式事务基础理论" class="headerlink" title="分布式事务基础理论"></a>分布式事务基础理论</h2><p>分布式系统之所以叫分布式，是因为提供服务的各个节点分布在不同机器上，相互之间通过网络交互。不能因为有一点网络问题就导致整个系统无法提供服务，网络因素成为了分布式事务的考量标准之一。因此，分布式事务需要更进一步的理论支持。</p><h3 id="CAP理论"><a href="#CAP理论" class="headerlink" title="CAP理论"></a>CAP理论</h3><p>CAP 是 Consistency (一致性)、Availability (可用性)、Partition tolerance (分区容忍性) 三个单词的缩写。</p><img src="https://pic.imgdb.cn/item/64ef3da5661c6c8e54c0d39e.png" alt="商品信息管理的执行流程" style="zoom: 67%;" /><p>整体执行流程如下:</p><ol><li>商品服务请求主数据库写入商品信息（添加商品、修改商品、删除商品）</li><li>主数据库向商品服务响应写入成功</li><li>商品服务请求从数据库读取商品信息</li></ol><h4 id="C-Consistency"><a href="#C-Consistency" class="headerlink" title="C - Consistency"></a>C - Consistency</h4><p> 一致性是指写操作后的读操作可以读取到最新的数据状态，当数据分布在多个节点上，从任意结点读取到的数据都是最新的状态。</p><p>上图中，商品信息的读写要满足一致性就是要实现如下目标：</p><ol><li>商品服务写入主数据库成功，则向从数据库查询新数据也成功。</li><li>商品服务写入主数据库失败，则向从数据库查询新数据也失败。</li></ol><p><strong>如何实现一致性？</strong></p><ol><li>写入主数据库后要将数据同步到从数据库。</li><li>写入主数据库后，在向从数据库同步期间要将从数据库锁定，待同步完成后再释放锁，以免在新数据写入成功后，向从数据库查询到旧的数据。</li></ol><p><strong>分布式系统一致性的特点：</strong></p><ol><li>由于存在数据同步的过程，写操作的响应会有一定的延迟。</li><li>为了保证数据一致性会对资源暂时锁定，待数据同步完成释放锁定资源。</li><li>如果请求数据同步失败的结点则会返回错误信息，一定不会返回旧数据。</li></ol><h4 id="A-Availability"><a href="#A-Availability" class="headerlink" title="A - Availability"></a>A - Availability</h4><p>可用性是指任何事务操作都可以得到响应结果，且不会出现响应超时或响应错误。</p><p>上图中，商品信息读取满足可用性就是要实现如下目标：</p><ol><li>从数据库接收到数据查询的请求则立即能够响应数据查询结果。</li><li>从数据库不允许出现响应超时或响应错误。</li></ol><p><strong>如何实现可用性</strong></p><ol><li>写入主数据库后要将数据同步到从数据库。</li><li>由于要保证从数据库的可用性，不可将从数据库中的资源进行锁定。</li><li>即时数据还没有同步过来，从数据库也要返回要查询的数据，哪怕是旧数据，如果连旧数据也没有则可以按照约定返回一个默认信息，但不能返回错误或响应超时。</li></ol><p><strong>分布式系统可用性的特点：</strong></p><p>所有请求都有响应，且不会出现响应超时或响应错误。</p><h4 id="P-Partition-tolerance"><a href="#P-Partition-tolerance" class="headerlink" title="P - Partition tolerance"></a>P - Partition tolerance</h4><p>通常分布式系统的各各结点部署在不同的子网，这就是网络分区，不可避免的会出现由于网络问题而导致结点之间通信失败，此时仍可对外提供服务，这叫分区容忍性。</p><p>上图中，商品信息读写满足分区容忍性就是要实现如下目标：</p><ol><li>主数据库向从数据库同步数据失败不影响读写操作。</li><li>其一个结点挂掉不影响另一个结点对外提供服务。</li></ol><p><strong>如何实现分区容忍性？</strong></p><ol><li>尽量使用异步取代同步操作，例如使用异步方式将数据从主数据库同步到从数据，这样结点之间能有效的实现松耦合。</li><li>添加从数据库结点，其中一个从结点挂掉其它从结点提供服务。</li></ol><p><strong>分布式分区容忍性的特点：</strong></p><p>分区容忍性分是布式系统具备的基本能力。</p><h2 id="CAP组合方式"><a href="#CAP组合方式" class="headerlink" title="CAP组合方式"></a>CAP组合方式</h2><p>在所有分布式事务场景中不会同时具备 CAP 三个特性，因为在具备了P的前提下C和A是不能共存的。</p><h4 id="AP"><a href="#AP" class="headerlink" title="AP"></a>AP</h4><p>放弃一致性，追求分区容忍性和可用性。这是很多分布式系统设计时的选择。<br>例如：上边的商品管理，完全可以实现 AP，前提是只要用户可以接受所查询到的数据在一定时间内不是最新的即可。<br>通常实现 AP 都会保证最终一致性，<strong>BASE</strong> 理论就是根据 AP 来扩展的，一些业务场景比如：订单退款，今日退款成功，明日账户到账，只要用户可以接受在一定的时间内到账即可。</p><h4 id="CP"><a href="#CP" class="headerlink" title="CP"></a>CP</h4><p>放弃可用性，追求一致性和分区容错性，zookeeper 其实就是追求的强一致，又比如跨行转账，一次转账请求要等待双方银行系统都完成整个事务才算完成。</p><h4 id="CA"><a href="#CA" class="headerlink" title="CA"></a>CA</h4><p>放弃分区容忍性，即不进行分区，不考虑由于网络不通或结点挂掉的问题，则可以实现一致性和可用性。那么系统将不是一个标准的分布式系统，最常用的关系型数据就满足了 CA。</p><p>CAP 是一个已经被证实的理论，一个分布式系统最多只能同时满足：一致性（Consistency）、可用性（Availability）和分区容忍性（Partition tolerance）这三项中的两项。它可以作为我们进行架构设计、技术选型的考量标准。对于多数大型互联网应用的场景，结点众多、部署分散，而且现在的集群规模越来越大，所以节点故障、网络故障是常态，而且要保证服务可用性达到 N 个 9（99.99..%），并要达到良好的响应性能来提高用户体验，因此一般都会做出如下选择：保证 P 和 A ，舍弃 C 强一致，保证最终一致性。</p><h3 id="BASE-理论"><a href="#BASE-理论" class="headerlink" title="BASE 理论"></a>BASE 理论</h3><h4 id="强一致性和最终一致性"><a href="#强一致性和最终一致性" class="headerlink" title="强一致性和最终一致性"></a>强一致性和最终一致性</h4><p>CAP 理论告诉我们一个分布式系统最多只能同时满足一致性（Consistency）、可用性（Availability）和分区容忍性（Partition tolerance）这三项中的两项，其中AP在实际应用中较多，AP 即舍弃一致性，保证可用性和分区容忍性，但是在实际生产中很多场景都要实现一致性，比如前边我们举的例子主数据库向从数据库同步数据，即使不要一致性，但是最终也要将数据同步成功来保证数据一致，这种一致性和 CAP 中的一致性不同，CAP 中的一致性要求 在任何时间查询每个结点数据都必须一致，它强调的是强一致性，但是最终一致性是允许可以在一段时间内每个结点的数据不一致，但是经过一段时间每个结点的数据必须一致，它强调的是最终数据的一致性。</p><h4 id="Base-理论介绍"><a href="#Base-理论介绍" class="headerlink" title="Base 理论介绍"></a>Base 理论介绍</h4><p>BASE 是 Basically Available（基本可用）、Soft state（软状态）和 Eventually consistent （最终一致性）三个短语的缩写。BASE 理论是对 CAP 中 AP 的一个扩展，通过牺牲强一致性来获得可用性，当出现故障允许部分不可用但要保证核心功能可用，允许数据在一段时间内是不一致的，但最终达到一致状态。满足BASE理论的事务，我们称之为“<strong>柔性事务</strong>”。</p><h4 id="基本可用"><a href="#基本可用" class="headerlink" title="基本可用"></a><strong>基本可用</strong></h4><p>分布式系统在出现故障时，允许损失部分可用功能，保证核心功能可用。如电商网站交易付款出现问题了，商品依然可以正常浏览。</p><h4 id="软状态"><a href="#软状态" class="headerlink" title="软状态"></a><strong>软状态</strong></h4><p>由于不要求强一致性，所以BASE允许系统中存在中间状态（也叫<strong>软状态</strong>），这个状态不影响系统可用性，如订单的”支付中”、“数据同步中”等状态，待数据最终一致后状态改为“成功”状态。</p><h4 id="最终一致"><a href="#最终一致" class="headerlink" title="最终一致"></a><strong>最终一致</strong></h4><p>最终一致是指经过一段时间后，所有节点数据都将会达到一致。如订单的”支付中”状态，最终会变 为“支付成功”或者”支付失败”，使订单状态与实际交易结果达成一致，但需要一定时间的延迟、等待。</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是消息队列?</title>
      <link href="/posts/7a987238.html"/>
      <url>/posts/7a987238.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是消息队列？"><a href="#什么是消息队列？" class="headerlink" title="什么是消息队列？"></a>什么是消息队列？</h2><p>消息队列，简称为MQ(Message Queue)。</p><p>我们可以将消息队列简单的理解为消息就是要传输的数据，我们把消息放在队列中，当我们需要使用消息的时候可以取出消息供自己使用。消息队列是分布式系统中重要的组件，使用消息队列主要是为了通过异步处理提高系统性能和削峰、降低系统耦合性。</p><p>队列我们都知道是一种先进先出的数据结构，所以消费消息时也是按照顺序来消费的，比如生产者发送消息顺序为1、2、3，对于消费者就会按照1、2、3的顺序来消费。但是偶尔也会出现消息被消费的顺序不对的情况，比如某个消息消费失败又或者一个队列多个消费者也会导致消息被消费的顺序不对，我们一定要保证消息被消费的顺序正确。</p><blockquote><p>PS:</p><ul><li>把数据放到消息队列叫做<strong>生产者</strong></li><li>从消息队列里取数据叫做<strong>消费者</strong></li></ul></blockquote><p>除了消息消费顺序的问题，我们还要考虑如何保证消息不被重复消费？如何保证消息的可靠性传输（如何处理消息丢失的问题）？等等。所以说使用消息队列也不是十全十美的，使用它也会让系统可用性降低、复杂度提高，另外需要我们保障一致性等问题。</p><h2 id="为什么要用消息队列？"><a href="#为什么要用消息队列？" class="headerlink" title="为什么要用消息队列？"></a>为什么要用消息队列？</h2><h4 id="1-解耦"><a href="#1-解耦" class="headerlink" title="1.解耦"></a>1.解耦</h4><p>程序A有一个数据，程序B和C都需要这个数据，就在A里面调用B、C的接口，如果有一天B不需要了但有个程序D需要，我们需要修改A的代码，删除调用B的接口，并且调用D的接口。这样系统的耦合性很高。</p><p>此时如果我们把数据放到消息队列中，A只需要将数据存放到队列中，其他程序需要这个数据时直接从队列中拿，如果不需要了也和A没有关系了，这样A就与B、C、D解耦了。</p><h4 id="2-异步"><a href="#2-异步" class="headerlink" title="2.异步"></a>2.异步</h4><p>比如一个下单系统，业务非常简单，只需要下单然后付钱，一秒就结束了。如果在这中间加入了积分、短信等业务，系统按照流程走完需要很长时间。</p><p>此时我们可以将下单成功的消息存放到队列中然后返回，其他业务从队列中拿到下单成功的消息后异步执行，大大提高了系统的效率。</p><h4 id="3-削峰"><a href="#3-削峰" class="headerlink" title="3.削峰"></a>3.削峰</h4><p>系统只能承载每秒1000个请求，我们有两台机器处理请求。现在有一个秒杀活动会一秒有3000个请求，此时服务器承载不了多出的1000个请求时就会崩掉。</p><p>此时我们可以把这些请求放到队列中，系统根据自己的能力拿出相应的请求数量去处理，这样当有大量请求涌入的时候服务器就不会崩掉。</p><h2 id="使用消息队列会有什么问题？"><a href="#使用消息队列会有什么问题？" class="headerlink" title="使用消息队列会有什么问题？"></a>使用消息队列会有什么问题？</h2><h4 id="1-提高系统复杂性"><a href="#1-提高系统复杂性" class="headerlink" title="1.提高系统复杂性"></a>1.提高系统复杂性</h4><p>使用了消息队列后就要想着去维护它，要考虑使用过程中遇到的各种问题，如被重复消费、处理消息丢失的情况、保证消息传递的顺序性等等问题。</p><h4 id="2-降低系统可用性"><a href="#2-降低系统可用性" class="headerlink" title="2.降低系统可用性"></a>2.降低系统可用性</h4><p>加入消息队列后需要考虑消息丢失或消息队列挂掉等情况。</p><h4 id="3-数据的一致性"><a href="#3-数据的一致性" class="headerlink" title="3.数据的一致性"></a>3.数据的一致性</h4><p>异步处理的业务逻辑如果出现了问题，就会导致数据不一致。如下单成功了但没有积分或没有发送短信。</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是循环依赖?Spring是如何解决循环依赖的?</title>
      <link href="/posts/dfc12e7c.html"/>
      <url>/posts/dfc12e7c.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是循环依赖"><a href="#什么是循环依赖" class="headerlink" title="什么是循环依赖"></a>什么是循环依赖</h2><p>BeanA中需要注入BeanB，BeanB中需要注入BeanA，从而造成了循环依赖。</p><h2 id="什么情况下循环依赖可以被解决？"><a href="#什么情况下循环依赖可以被解决？" class="headerlink" title="什么情况下循环依赖可以被解决？"></a>什么情况下循环依赖可以被解决？</h2><ol><li>出现循环依赖的Bean必须是单例。</li><li>依赖注入的方式不能全部都是构造器注入。</li></ol><h2 id="Spring是如何解决循环依赖的？"><a href="#Spring是如何解决循环依赖的？" class="headerlink" title="Spring是如何解决循环依赖的？"></a>Spring是如何解决循环依赖的？</h2><p>Spring为了解决循环依赖设计了三级缓存：</p><ul><li>一级缓存：存放<strong>完全初始化好</strong>的Bean。</li><li>二级缓存：存放实例化但还<strong>没进行依赖注入</strong>的Bean。</li><li>三级缓存：存放ObjectFactory对象。</li></ul><p>假设A依赖B，B依赖A，Spring创建A实例过程如下：</p><ol><li>BeanA执行<strong>doGetBean</strong>方法、依次查询三个缓存是否存在该bean，不存在就将BeanA实例化，然后把BeanA包装成一个ObjectFactory对象保存到三级缓存中。</li><li>BeanA对成员属性BeanB进行依赖注入。</li><li>BeanB执行<strong>doGetBean</strong>方法、依次查询三个缓存是否存在该bean，不存在就将BeanB实例化，然后把BeanB包装成一个ObjectFactory对象保存到三级缓存中。</li><li>BeanB对成员属性BeanA进行依赖注入。</li><li>再次调用<strong>doGetBean</strong>方法创建BeanA实例，查询三个缓存，在三级缓存得到了BeanA的早期引用，将它放到二级缓存并移除三级缓存并返回，B完成属性装配，一个完整的对象放到一级缓存中。</li><li>BeanA同样得到一个BeanB，完成依赖注入并放入一级缓存。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链式编程</title>
      <link href="/posts/7c194a5.html"/>
      <url>/posts/7c194a5.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是链式编程"><a href="#什么是链式编程" class="headerlink" title="什么是链式编程"></a>什么是链式编程</h2><p>链式编程实际上就是返回this对象，从而达到链式的效果。</p><p>doFunc(x).andThen().andThen().andThen();</p><h2 id="我们用过链式编程吗？"><a href="#我们用过链式编程吗？" class="headerlink" title="我们用过链式编程吗？"></a>我们用过链式编程吗？</h2><p>其实链式编程非常常见，如我们经常使用的StringBuilder和StringBuffer的append()方法就是最好的例子。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">buffer.append(<span class="string">&quot;链式&quot;</span>).append(<span class="string">&quot;编程&quot;</span>).append(<span class="string">&quot;!&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="append-源码"><a href="#append-源码" class="headerlink" title="append()源码"></a>append()源码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> StringBuilder <span class="title function_">append</span><span class="params">(String str)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.append(str);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链式编程示例"><a href="#链式编程示例" class="headerlink" title="链式编程示例"></a>链式编程示例</h2><p>这是一个Person类，区别于常规的Bean就是让set方法返回了this对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Person <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Person <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="keyword">return</span>  <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAddress</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Person <span class="title function_">setAddress</span><span class="params">(String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们就可以达到链式编程的效果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        person.setName(<span class="string">&quot;大头儿子&quot;</span>)</span><br><span class="line">                .setAge(<span class="number">5</span>)</span><br><span class="line">                .setAddress(<span class="string">&quot;幸福小区&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这样的代码是不是看起来就更简洁明了，也省去了很多重复的不必要的代码。</p><h2 id="Lombok简化开发"><a href="#Lombok简化开发" class="headerlink" title="Lombok简化开发"></a>Lombok简化开发</h2><p>lombok中提供了开启链式编程的注解，我们只需要设置@Accessors(chain &#x3D; true)即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis的持久化 (为什么没有设置持久化也自动的进行了持久化操作)</title>
      <link href="/posts/28bc9aad.html"/>
      <url>/posts/28bc9aad.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>在说持久化前我们应该先了解为什么要持久化？</p><p>这是因为 Redis 是<strong>基于内存</strong>的数据库，宕机后我们保存在内存中的数据会消失，如果想要恢复这些数据，就需要持久化操作。</p><h2 id="Redis有哪几种持久化方式"><a href="#Redis有哪几种持久化方式" class="headerlink" title="Redis有哪几种持久化方式"></a>Redis有哪几种持久化方式</h2><p>Redis的持久化分为 RDB 和 AOF 两种模式。</p><p>RDB：默认的持久化方式，以指定的时间间隔执行数据集的时间点快照，也就是说 RDB 是以快照方式将某一时刻的数据保存到磁盘上，生成一个 dump.rdb 文件，每当 redis 重启后会优先读取 dump.rdb 文件，将数据写入内存中。</p><p>AOF：默认情况下是关闭的，采用日志的形式记录每个写操作，追加在 AOF 文件末尾。启用后生成的持久化文件为 appendonly.aof。</p><p>当然你也可以选择不采用持久化操作或使用 RDB + AOF 的混合持久化操作。</p><h2 id="RDB-Redis-DataBase"><a href="#RDB-Redis-DataBase" class="headerlink" title="RDB (Redis DataBase)"></a>RDB (Redis DataBase)</h2><h4 id="RDB的配置"><a href="#RDB的配置" class="headerlink" title="RDB的配置"></a>RDB的配置</h4><p>打开 Redis 的配置文件 redis.conf，save 可以设置在指定时间内更新操作达到指定次数就进行快照，可以多条save 同时使用。</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">save 900 1  <span class="params">#</span> 表示900秒内至少1个键被更改则进行快照</span><br><span class="line">save 300 10  <span class="params">#</span> 表示300秒内至少10个键被更改则进行快照</span><br><span class="line">save 60 10000  <span class="params">#</span> 表示60秒内至少10000个键被更改则进行快照</span><br></pre></td></tr></table></figure><p>还可以通过 <strong>dbfilename</strong> 设置快照文件名，默认为 dump.rdb；通过 <strong>dir</strong> 设置保存路径。</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ol><li>RDB是二进制压缩文件，占用空间小，便于传输(主从复制)。</li><li>适合大规模的数据恢复。</li><li>对数据完整性和一致性要求不高。</li><li>在内存中加载速度快。</li><li>主进程fork子进程，最大化Redis性能。</li></ol><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ol><li>数据完整性得不到保障，如果在定时持久化前宕机，会丢失最后一次持久化后的所有数据。</li><li>依赖于主进程的fork，在大数据集中，会阻塞。</li></ol><h2 id="AOF-Append-Only-File"><a href="#AOF-Append-Only-File" class="headerlink" title="AOF (Append Only File)"></a>AOF (Append Only File)</h2><h4 id="AOF的三种写回策略"><a href="#AOF的三种写回策略" class="headerlink" title="AOF的三种写回策略"></a>AOF的三种写回策略</h4><ol><li>always：同步写回，每个写命令执行完立刻同步地将日志写回磁盘。</li><li>everysec (默认)：每秒写回，每个写命令执行后会先把日志写到 AOF 文件内存缓冲区，每隔一秒将缓存区内容写到磁盘上。</li><li>no：写命令执行完后把日志写到 AOF 文件内存缓冲区，由操作系统决定何时将缓冲区内容写入磁盘。</li></ol><h4 id="AOF的配置"><a href="#AOF的配置" class="headerlink" title="AOF的配置"></a>AOF的配置</h4><p>打开 Redis 的配置文件 redis.conf ，将 appendonly 改为 yes</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">appendonly yes</span><br><span class="line"></span><br><span class="line"><span class="params">#</span> 三种写回策略</span><br><span class="line"><span class="params">#</span> appendfsync always</span><br><span class="line">appendfsync everysec  <span class="params">#</span> 默认</span><br><span class="line"><span class="params">#</span> appendfsync no</span><br></pre></td></tr></table></figure><p>同样可以使用 <strong>dir</strong> 设置保存路径，设置 AOF 文件名需要更改 <strong>appendfilename</strong></p><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><ol><li>更好的保护数据完整性。</li></ol><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><ol><li>对于相同数据集而言，AOF文件会比 RDB文件更大，恢复速度也慢于 RDB。</li></ol><h4 id="AOF的重写机制"><a href="#AOF的重写机制" class="headerlink" title="AOF的重写机制"></a>AOF的重写机制</h4><p>当 AOF 文件大小超过所设定的峰值时，Redis 就会自动启动 AOF 文件的内容压缩，只保留可以恢复数据的最小指令集。</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">#</span> 当前aof文件大小超过上一次aof文件大小的百分之多少进行重写</span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line"></span><br><span class="line"><span class="params">#</span> 当文件大小大于64mb时进行重写</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br></pre></td></tr></table></figure><p>两条配置要<strong>同时满足</strong>才会触发重写。</p><p><strong>手动重写</strong>：执行 bgrewriteaof 命令</p><h2 id="混合持久化"><a href="#混合持久化" class="headerlink" title="混合持久化"></a>混合持久化</h2><p>同时开启 RDB 和 AOF，启用混合持久化后重启时只会加载 AOF 文件，不会加载 RDB 文件，如果没有 AOF 文件再去加载 RDB 文件。</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">#</span> 开启混合持久化</span><br><span class="line">aof-use-rdb-preamble yes</span><br></pre></td></tr></table></figure><p>这种持久化方式会先进行快照存储，然后使用 AOF 持久化记录所有写操作，当触发重写后，将最新的数据存储为RDB 记录，重启服务时就会从 RDB 和 AOF 两部分恢复数据，即保证数据完整性又提高恢复数据的性能。这种持久化方式生成的文件一部分为 RDB，一部分为 AOF。</p><h2 id="为什么两个持久化都没有开启却进行了持久化操作"><a href="#为什么两个持久化都没有开启却进行了持久化操作" class="headerlink" title="为什么两个持久化都没有开启却进行了持久化操作"></a>为什么两个持久化都没有开启却进行了持久化操作</h2><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">#</span> save 900 1</span><br><span class="line"><span class="params">#</span> save 300 10</span><br><span class="line"><span class="params">#</span> save 60 10000</span><br><span class="line"></span><br><span class="line">appendonly no</span><br></pre></td></tr></table></figure><h4 id="触发快照的条件"><a href="#触发快照的条件" class="headerlink" title="触发快照的条件"></a>触发快照的条件</h4><ol><li>满足配置文件中设置的 save。</li><li>手动执行 sava &#x2F; bgsave 命令。</li><li>执行 flushall &#x2F; flushdb 命令，但产生的是空 dump.rdb 文件。</li><li>执行shutdown且没有开启 AOF 持久化。</li><li>主从复制。</li></ol><p>如果想彻底<strong>禁用</strong> RDB，可以将save置空</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">save &quot;&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
